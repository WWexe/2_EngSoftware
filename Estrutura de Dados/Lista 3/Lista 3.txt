Ex 01 -

#include <stdio.h>
#include <stdlib.h>

int main() {
    int *vetor, tamanho, i;
    int pares = 0, impares = 0;

    printf("Digite o tamanho do vetor: ");
    scanf("%d", &tamanho);

    vetor = (int *)malloc(tamanho * sizeof(int));

    if (vetor == NULL) {
        printf("Erro na alocacao de memoria.\n");
        return 1;
    }

    for (i = 0; i < tamanho; i++) {
        printf("Digite o valor para a posicao %d: ", i + 1);
        scanf("%d", &vetor[i]);
    }

    for (i = 0; i < tamanho; i++) {
        if (vetor[i] % 2 == 0) {
            pares++;
        } else {
            impares++;
        }
    }

    printf("Quantidade de numeros pares: %d\n", pares);
    printf("Quantidade de numeros impares: %d\n", impares);

    free(vetor);

    return 0;
}


Ex 02 -

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* alocarString(int tamanho) {
    return (char*)malloc(tamanho * sizeof(char));
}

void removerVogais(char *str) {
    int i, j = 0;
    int tamanho = strlen(str);
    char *resultado = (char*)malloc((tamanho + 1) * sizeof(char));

    for (i = 0; i < tamanho; i++) {
        if (str[i] != 'a' && str[i] != 'e' && str[i] != 'i' && str[i] != 'o' && str[i] != 'u' &&
            str[i] != 'A' && str[i] != 'E' && str[i] != 'I' && str[i] != 'O' && str[i] != 'U') {
            resultado[j++] = str[i];
        }
    }
    resultado[j] = '\0';

    printf("String sem vogais: %s\n", resultado);
    free(resultado);
}

int main() {
    char *str;
    int tamanho;

    printf("Digite o tamanho da string: ");
    scanf("%d", &tamanho);

    str = alocarString(tamanho + 1); 

    if (str == NULL) {
        printf("Erro na alocação de memoria.\n");
        return 1;
    }

    printf("Digite a string: ");
    scanf(" %[^\n]", str);

    removerVogais(str);

    free(str);

    return 0;
}


Ex 03 - 

#include <stdio.h>
#include <stdlib.h>

int main() {
    int *vetor, N, X, i, contagem = 0;

    printf("Digite o tamanho do vetor N: ");
    scanf("%d", &N);

    vetor = (int *)malloc(N * sizeof(int));

    if (vetor == NULL) {
        printf("Erro na alocação de memoria.\n");
        return 1;
    }

    printf("Digite os elementos do vetor:\n");
    for (i = 0; i < N; i++) {
        printf("Elemento %d: ", i + 1);
        scanf("%d", &vetor[i]);
    }

    printf("Digite o valor de X: ");
    scanf("%d", &X);

    printf("Multiplos de %d no vetor:\n", X);
    for (i = 0; i < N; i++) {
        if (vetor[i] % X == 0) {
            printf("%d ", vetor[i]);
            contagem++;
        }
    }

    if (contagem == 0) {
        printf("Nenhum multiplo de %d encontrado no vetor.", X);
    } else {
        printf("\nTotal de multiplos de %d: %d", X, contagem);
    }

    free(vetor);

    return 0;
}


Ex 04 -

#include <stdio.h>
#include <stdlib.h>

int main() {
    int loteria[6], bilhete[6], *acertos, quantidade_acertos = 0;

    printf("Digite os 6 numeros sorteados pela loteria:\n");
    for (int i = 0; i < 6; i++) {
        printf("Número %d: ", i + 1);
        scanf("%d", &loteria[i]);
    }

    printf("Digite os 6 numeros do seu bilhete:\n");
    for (int i = 0; i < 6; i++) {
        printf("Numero %d: ", i + 1);
        scanf("%d", &bilhete[i]);
    }

    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 6; j++) {
            if (loteria[i] == bilhete[j]) {
                quantidade_acertos++;
                break;
            }
        }
    }

    acertos = (int *)malloc(quantidade_acertos * sizeof(int));

    if (acertos == NULL) {
        printf("Erro na alocacao de memoria.\n");
        return 1;
    }

    int indice = 0;
    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 6; j++) {
            if (loteria[i] == bilhete[j]) {
                acertos[indice++] = loteria[i];
                break;
            }
        }
    }

    printf("Numeros sorteados: ");
    for (int i = 0; i < 6; i++) {
        printf("%d ", loteria[i]);
    }

    printf("\nNumeros acertados: ");
    if (quantidade_acertos > 0) {
        for (int i = 0; i < quantidade_acertos; i++) {
            printf("%d ", acertos[i]);
        }
    } else {
        printf("Nenhum acerto.");
    }

    printf("\n");

    free(acertos);

    return 0;


Ex 05 -

#include <stdio.h>
#include <stdlib.h>

int main() {
    int *vetor = NULL, numero, tamanho = 0;

    printf("Digite os numeros (insira um numero negativo para parar):\n");

    while (1) {
        scanf("%d", &numero);

        if (numero < 0) {
            break;
        }

        tamanho++;
        vetor = (int *)realloc(vetor, tamanho * sizeof(int));

        if (vetor == NULL) {
            printf("Erro na alocacao de memoria.\n");
            return 1;
        }

        vetor[tamanho - 1] = numero;
    }

    printf("Numeros lidos:\n");
    for (int i = 0; i < tamanho; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");

    free(vetor);

    return 0;
}


Ex 06 -

#include <stdio.h>
#include <stdlib.h>

int buscaNaMatriz(int **matriz, int linhas, int colunas, int valor) {
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            if (matriz[i][j] == valor) {
                return 1;
            }
        }
    }
    return 0;
}

int main() {
    int **matriz;
    int linhas, colunas, valor;

    printf("Digite o numero de linhas: ");
    scanf("%d", &linhas);
    printf("Digite o numero de colunas: ");
    scanf("%d", &colunas);

    matriz = (int **)malloc(linhas * sizeof(int *));
    for (int i = 0; i < linhas; i++) {
        matriz[i] = (int *)malloc(colunas * sizeof(int));
    }

    if (matriz == NULL) {
        printf("Erro na alocacao de memoria.\n");
        return 1;
    }

    printf("Digite os elementos da matriz:\n");
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            printf("Elemento [%d][%d]: ", i, j);
            scanf("%d", &matriz[i][j]);
        }
    }

    printf("Digite o valor a ser buscado na matriz: ");
    scanf("%d", &valor);

    if (buscaNaMatriz(matriz, linhas, colunas, valor)) {
        printf("O valor %d esta presente na matriz.\n", valor);
    } else {
        printf("O valor %d não esta presente na matriz.\n", valor);
    }

    for (int i = 0; i < linhas; i++) {
        free(matriz[i]);
    }
    free(matriz);

    return 0;
}


Ex 07 - 

#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int valor;
    int linha;
    int coluna;
} NumeroPosicao;

int main() {
    int N, M;

    printf("Digite o numero de linhas (N): ");
    if (scanf("%d", &N) != 1 || N <= 0) {
        printf("Entrada invalida para N.\n");
        return 1;
    }

    printf("Digite o numero de colunas (M): ");
    if (scanf("%d", &M) != 1 || M <= 0) {
        printf("Entrada invalida para M.\n");
        return 1;
    }

    int **matriz = (int **)malloc(N * sizeof(int *));
    if (matriz == NULL) {
        printf("Erro na alocacao de memoria para as linhas da matriz.\n");
        return 1;
    }

    for (int i = 0; i < N; i++) {
        matriz[i] = (int *)malloc(M * sizeof(int));
        if (matriz[i] == NULL) {
            printf("Erro na alocacao de memoria para a linha %d.\n", i);
            for (int k = 0; k < i; k++) {
                free(matriz[k]);
            }
            free(matriz);
            return 1;
        }
    }

    printf("Digite os elementos da matriz (%d elementos):\n", N * M);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            printf("Elemento [%d][%d]: ", i + 1, j + 1);
            if (scanf("%d", &matriz[i][j]) != 1) {
                printf("Entrada invalida para o elemento [%d][%d].\n", i + 1, j + 1);
                for (int k = 0; k < N; k++) {
                    free(matriz[k]);
                }
                free(matriz);
                return 1;
            }
        }
    }

    NumeroPosicao maior1, maior2;
    maior1.valor = matriz[0][0];
    maior1.linha = 0;
    maior1.coluna = 0;
    maior2.valor = -2147483648;
    maior2.linha = -1;
    maior2.coluna = -1;

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            int atual = matriz[i][j];
            if (atual > maior1.valor) {
                maior2.valor = maior1.valor;
                maior2.linha = maior1.linha;
                maior2.coluna = maior1.coluna;

                maior1.valor = atual;
                maior1.linha = i;
                maior1.coluna = j;
            } else if (atual > maior2.valor && atual != maior1.valor) {
                maior2.valor = atual;
                maior2.linha = i;
                maior2.coluna = j;
            }
        }
    }

    if (maior2.linha == -1 && maior2.coluna == -1) {
        printf("\nA matriz possui apenas um valor único: %d na posição [%d][%d].\n",
               maior1.valor, maior1.linha + 1, maior1.coluna + 1);
    } else {
        printf("\nOs dois maiores numeros na matriz sao:\n");
        printf("1º Maior: %d na posicao [%d][%d]\n", maior1.valor, maior1.linha + 1, maior1.coluna + 1);
        printf("2º Maior: %d na posicao [%d][%d]\n", maior2.valor, maior2.linha + 1, maior2.coluna + 1);
    }

    for (int i = 0; i < N; i++) {
        free(matriz[i]);
    }
    free(matriz);

    return 0;
}


Ex 08 -


#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int matricula;
    char sobrenome[50];
    int ano_nascimento;
} Aluno;

int main() {
    int num_alunos;

    printf("Digite o numero de alunos: ");
    if (scanf("%d", &num_alunos) != 1 || num_alunos <= 0) {
        printf("Numero de alunos invalido.\n");
        return 1;
    }

    Aluno *alunos = (Aluno *)malloc(num_alunos * sizeof(Aluno));
    if (alunos == NULL) {
        printf("Erro na alocacao de memoria.\n");
        return 1;
    }

    for (int i = 0; i < num_alunos; i++) {
        printf("Digite os dados do aluno %d:\n", i + 1);

        printf("Matricula: ");
        scanf("%d", &alunos[i].matricula);

        printf("Sobrenome: ");
        scanf("%s", alunos[i].sobrenome);

        printf("Ano de nascimento: ");
        scanf("%d", &alunos[i].ano_nascimento);
    }

    printf("\nDados dos alunos cadastrados:\n");
    for (int i = 0; i < num_alunos; i++) {
        printf("Aluno %d:\n", i + 1);
        printf("Matricula: %d\n", alunos[i].matricula);
        printf("Sobrenome: %s\n", alunos[i].sobrenome);
        printf("Ano de nascimento: %d\n", alunos[i].ano_nascimento);
        printf("\n");
    }

    free(alunos);

    return 0;
}


Ex 09 -


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NOME 50

typedef struct {
    int codigo;
    char nome[MAX_NOME];
    int quantidade;
    float preco;
} produto;

produto encontrarMaiorPreco(produto *estoque, int numProdutos) {
    produto maiorPreco = estoque[0];
    for (int i = 1; i < numProdutos; i++) {
        if (estoque[i].preco > maiorPreco.preco) {
            maiorPreco = estoque[i];
        }
    }
    return maiorPreco;
}

produto encontrarMaiorQuantidade(produto *estoque, int numProdutos) {
    produto maiorQuantidade = estoque[0];
    for (int i = 1; i < numProdutos; i++) {
        if (estoque[i].quantidade > maiorQuantidade.quantidade) {
            maiorQuantidade = estoque[i];
        }
    }
    return maiorQuantidade;
}

int main() {
    int numProdutos = 0;
    int capacidade = 1;
    produto *estoque = malloc(capacidade * sizeof(produto));

    if (estoque == NULL) {
        printf("Erro ao alocar memoria.\n");
        return 1;
    }

    char opcao;
    do {
        if (numProdutos == capacidade) {
            capacidade *= 2;
            produto *temp = realloc(estoque, capacidade * sizeof(produto));
            if (temp == NULL) {
                printf("Erro ao realocar memoria.\n");
                free(estoque);
                return 1;
            }
            estoque = temp;
        }

        printf("Digite o codigo do produto: ");
        scanf("%d", &estoque[numProdutos].codigo);
        printf("Digite o nome do produto: ");
        scanf(" %[^\n]", estoque[numProdutos].nome);
        printf("Digite a quantidade disponivel: ");
        scanf("%d", &estoque[numProdutos].quantidade);
        printf("Digite o preco de venda: ");
        scanf("%f", &estoque[numProdutos].preco);

        numProdutos++;

        printf("Deseja adicionar outro produto? (s/n): ");
        scanf(" %c", &opcao);

    } while (opcao == 's' || opcao == 'S');

    produto maisCaro = encontrarMaiorPreco(estoque, numProdutos);
    produto maisDisponivel = encontrarMaiorQuantidade(estoque, numProdutos);

    printf("Produto com maior preço: Codigo %d, Nome %s, Preço %.2f\n",
           maisCaro.codigo, maisCaro.nome, maisCaro.preco);
    printf("Produto com maior quantidade: Codigo %d, Nome %s, Quantidade %d\n",
           maisDisponivel.codigo, maisDisponivel.nome, maisDisponivel.quantidade);

    free(estoque);
    return 0;
}

